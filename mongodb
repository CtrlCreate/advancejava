ðŸ”§ Prerequisites
âœ… MongoDB Server installed and running (localhost:27017)

âœ… MongoDB Compass (optional for GUI)

âœ… Eclipse IDE for Enterprise Java Developers

âœ… JDK 8+

âœ… Maven installed in Eclipse
============================================================================================================

âœ… Step 1: Install Required Tools
MongoDB Server: https://www.mongodb.com/try/download/community

MongoDB Compass (GUI Dashboard): https://www.mongodb.com/try/download/compass

MongoDB Shell (mongosh): https://www.mongodb.com/try/download/shell

After installation, MongoDB runs by default on mongodb://localhost:27017

âœ… Step 2: Create Maven Java Project
Project Structure:


MongoDBJavaApp/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ main/
â”‚       â””â”€â”€ java/
â”‚           â””â”€â”€ com/example/
â”‚               â””â”€â”€ MongoApp.java
â”œâ”€â”€ pom.xml

=========================================================================================================================
ðŸ“¦ Step-by-Step: Creating the Project in Eclipse

âœ… Step 1: Create Maven Project
Open Eclipse

Go to:
File â†’ New â†’ Maven Project

Check Create a simple project â†’ Next

Fill:

Group Id: com.example

Artifact Id: MongoDBJavaApp

Packaging: jar

Version: keep default

Finish

âœ… Step 2: Add MongoDB Dependency
Open pom.xml and paste:


<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MongoDBJavaApp</artifactId>
  <version>1.0</version>

  <dependencies>
    <!-- MongoDB Java Driver -->
    <dependency>
      <groupId>org.mongodb</groupId>
      <artifactId>mongodb-driver-sync</artifactId>
      <version>4.11.0</version>
    </dependency>
  </dependencies>
</project>
Then:

Right-click the project â†’ Maven â†’ Update Project (to download the MongoDB driver)


âœ… Step 3: Create Java Package and Class
Right-click src/main/java â†’ New > Package â†’ Name: com.example

Right-click com.example â†’ New > Class â†’ Name: MongoApp
Check: public static void main(String[] args)

âœ… Step 4: Paste Java Code
Inside MongoApp.java, paste:


package com.example;

import com.mongodb.client.*;
import org.bson.Document;

public class MongoApp {
    public static void main(String[] args) {
        try (MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017")) {
            System.out.println("Connected to MongoDB!");

            MongoDatabase db = mongoClient.getDatabase("school");
            MongoCollection<Document> collection = db.getCollection("students");

            Document student = new Document("name", "Manoj R B")
                    .append("regno", "241047023")
                    .append("department", "CSE")
                    .append("marks", 89);

            collection.insertOne(student);
            System.out.println("Document inserted.");

            Document result = collection.find(new Document("regno", "241047023")).first();
            System.out.println("Found: " + result.toJson());

            collection.updateOne(new Document("regno", "241047023"),
                    new Document("$set", new Document("marks", 95)));
            System.out.println("Document updated.");

            collection.deleteOne(new Document("regno", "241047023"));
            System.out.println("Document deleted.");
        }
    }
}
  
âœ… Step 5: Run the Application
Right-click on MongoApp.java â†’ Run As â†’ Java Application

âœ… Expected Output:

Connected to MongoDB!
Document inserted.
Found: { "_id": "...", "name": "Manoj R B", "regno": "241047023", ... }
Document updated.
Document deleted.
